import cv2
import numpy as np

# mayur's code for double passing template images

cap = cv2.VideoCapture('1phmetervideo.mp4')
img1 = cv2.imread("kw temp3.png", cv2.IMREAD_GRAYSCALE) # query image1
img2 = cv2.imread("kwh temp 2.png", cv2.IMREAD_GRAYSCALE) # query image2

# Features
sift = cv2.xfeatures2d.SIFT_create()
kp_image1, desc_image1 = sift.detectAndCompute(img1, None)
kp_image2, desc_image2 = sift.detectAndCompute(img2, None)

bf = cv2.BFMatcher()

while (cap.isOpened()):
    _, frame = cap.read()
    grayframe = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) # trainimage
    
    kp_grayframe, desc_grayframe = sift.detectAndCompute(grayframe, None)
    
    matches1 = bf.knnMatch(desc_image1, desc_grayframe, k=2)
    matches2 = bf.knnMatch(desc_image2, desc_grayframe, k=2)
    
    good_points1 = []
    for m, n in matches1:
        if m.distance < 0.8*n.distance:
            good_points1.append(m)
            
     
    good_points2 = []
    for p, n in matches2:
        if p.distance < 0.8*n.distance:
            good_points2.append(p)
            
    
            
    
    img3 = cv2.drawMatches(img1, kp_image1, grayframe, kp_grayframe, good_points1, grayframe)
    
    #homography
    
    if ((len(good_points1)) | (len(good_points2))) > 5:
        query_pts1 = np.float32([kp_image1[m.queryIdx].pt for m in good_points1]).reshape(-1, 1, 2)
        query_pts2 = np.float32([kp_image2[p.queryIdx].pt for p in good_points2]).reshape(-1, 1, 2)
        
        
        train_pts1 = np.float32([kp_grayframe[m.trainIdx].pt for m in good_points1]).reshape(-1, 1, 2)
        train_pts2 = np.float32([kp_grayframe[p.trainIdx].pt for p in good_points2]).reshape(-1, 1, 2)
        
       
        matrix1, mask1 = cv2.findHomography(query_pts1, train_pts1, cv2.RANSAC, 5.0)
        matrix2, mask2 = cv2.findHomography(query_pts2, train_pts2, cv2.RANSAC, 5.0)
        
        # (matrix1 or matrix2) is None :
            
            
        
        matches_mask1 = mask1.ravel().tolist()
        matches_mask2 = mask2.ravel().tolist()
                
        
 
        # Perspective transform
        h1, w1 = img1.shape
        h2, w2 = img2.shape
        
        
        pts1 = np.float32([[0, 0], [0, h1], [w1, h1], [w1, 0]]).reshape(-1, 1, 2)
        pts2 = np.float32([[0, 0], [0, h2], [w2, h2], [w2, 0]]).reshape(-1, 1, 2)
        
        
        dst1 = cv2.perspectiveTransform(pts1, matrix1)
        dst2 = cv2.perspectiveTransform(pts2, matrix2)
        
 
        homography1 = cv2.polylines(frame, [np.int32(dst1)], True, (255, 0, 0), 2)
        homography2 = cv2.polylines(frame, [np.int32(dst2)], True, (255, 0, 0), 2)
        
 
        cv2.imshow("Homography", homography1)
        cv2.imshow("Homography", homography2)
        
    else:
        cv2.imshow("Homography", grayframe)
 
    
    
    #cv2.imshow("Image", img)
    #cv2.imshow("grayFrame", grayframe)
    #cv2.imshow("img3", img3)
    #cv2.imshow("img4", img4)
    
    key = cv2.waitKey(1)
    if key == 27:
        break
 
cap.release()
cv2.destroyAllWindows()